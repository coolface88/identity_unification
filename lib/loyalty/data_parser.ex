defmodule Loyalty.DataParser do
  require Jason 
  require UUID
  alias Loyalty.DataLabels, as: Label 

  @id_list                  ~w(id Id hotel_id)
  @destination_list         ~w(destination_id destination DestinationId)
  @hotel_name               ~w(name Name hotel_name)
  @latitude                 ~w(Latitude lat)
  @longitude                ~w(Longitude lng)
  @address                  ["address", "Address", ["location","address"]]
  @city                     ["City"] 
  @country                  ["Country", ["location","country"]]
  @postal_code              ["PostalCode"]
  @description              ["Description", "details", "info"]
  @amenities_general        ["amenities", "Facilities", ["amenities","general"]]
  @amenities_room           ["amenites_room", ["amenities", "room"]]
  @booking_conditions       ["booking_conditions"]
  @images_rooms_link        ["images_rooms_link", ["images", "rooms", "link"], ["images", "rooms", "url"]]
  @images_rooms_caption     ["images_rooms_caption", ["images","rooms", "caption"], ["images","rooms", "description"]]
  @images_amenities_link    ["images_site_link", ["images", "site", "link"], ["images", "amenities", "url"]]
  @images_amenities_caption ["images_site_caption", ["images", "site", "caption"], ["images", "amenities", "description"]]
  
  def import_data(data) do
    jsondecoded = Macro.escape(Jason.decode!(data))
    generate_graph_from_json(jsondecoded)
  end

  def generate_graph_from_json(data) when is_list(data) do
    for elem <- data do
      id = UUID.uuid1()
      destination_id = UUID.uuid1()
      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, id, Label.id])
      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, destination_id, Label.destination])
      case elem do
        {:%{},[],categories} -> for category <- categories do
                                  case category do
                                    {c,v} when c in @hotel_name -> 
                                                                name_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, name_node, Label.hotel_name])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, name_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, name_node, :has_name])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, name_node, :has_name])
                                    {c,v} when c in @booking_conditions -> 
                                                                booking_conditions_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, booking_conditions_node, Label.booking_conditions])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, booking_conditions_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, booking_conditions_node, :has_booking_condtions])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, booking_conditions_node, :has_booking_conditions])
                                    {c,v} when c in @description -> 
                                                                description_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, description_node, Label.description])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, description_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, description_node, :has_description])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, description_node, :has_description])
                                    {c,v} when c in @longitude -> 
                                                                longitude_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, longitude_node, Label.longitude])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, longitude_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, longitude_node, :has_longitude])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, longitude_node, :has_longitude])
                                    {c,v} when c in @id_list ->  
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, id, {c,v}])
                                    {c,v} when c in @destination_list ->  
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, destination_id, {c,v}]) 
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, destination_id, :identity])
                                    {c,v} when c in @latitude -> 
                                                                latitude_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, latitude_node, Label.latitude]) 
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, latitude_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, latitude_node, :has_latitude])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, latitude_node, :has_latitude])
                                    {c,v} when c in @address ->    
                                                                address_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, address_node, Label.address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, address_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, address_node, :has_address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, address_node, :has_address])
                                    {c,{:%{}, [],[{c1,v1},{c2,v2}]}} when [c,c1] in @address and [c,c2] in @country -> 
                                                                address_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, address_node, Label.address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, address_node, {c,c1,v1}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, address_node, :has_address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, address_node, :has_address])
                                                                country_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, country_node, Label.country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, country_node, {c,c2,v2}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, country_node, :has_country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, country_node, :has_country])
                                    {c,{:%{}, [],[{c1,v1},{c2,v2}]}} when [c,c1] in @country and [c,c2] in @address -> 
                                                                address_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, address_node, Label.address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, address_node, {c,c2,v2}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, address_node, :has_address])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, address_node, :has_address])
                                                                country_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, country_node, Label.country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, country_node, {c,c1,v1}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, country_node, :has_country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, country_node, :has_country])
                                    {c,v} when c in @city ->    
                                                                city_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, city_node, Label.city])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, city_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, city_node, :has_city])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, city_node, :has_city])
                                    {c,v} when c in @country -> 
                                                                country_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, country_node, Label.country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, country_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, country_node, :has_country])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, country_node, :has_country])
                                    {c,v} when c in @postal_code -> 
                                                                postal_code_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, postal_code_node, Label.postal_code])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, postal_code_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, postal_code_node, :has_postal_code])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, postal_code_node, :has_postal_code])
                                    {c,{:%{}, [],[{c1,v1},{c2,v2}]}} when [c,c1] in @amenities_general and [c,c2] in @amenities_room -> 
                                                                amenities_general_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, amenities_general_node, Label.amenities_general])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, amenities_general_node, {c,c1,v1}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, amenities_general_node, :has_amenities_genneral])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, amenities_general_node, :has_amenities_general])
                                                                amenities_room_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, amenities_room_node, Label.amenities_room])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, amenities_room_node, {c,c2,v2}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, amenities_room_node, :has_amenities_room])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, amenities_room_node, :has_amenities_room])
                                    {c,{:%{}, [],[{c1,v1},{c2,v2}]}} when [c,c2] in @amenities_general and [c,c1] in @amenities_room ->
                                                                amenities_general_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, amenities_general_node, Label.amenities_general])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, amenities_general_node, {c,c2,v2}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, amenities_general_node, :has_amenities_genneral])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, amenities_general_node, :has_amenities_general])
                                                                amenities_room_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, amenities_room_node, Label.amenities_room])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, amenities_room_node, {c,c1,v1}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, amenities_room_node, :has_amenities_room])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, amenities_room_node, :has_amenities_room])
                                   {c,v} when c in @amenities_general -> 
                                                                amenities_general_node = UUID.uuid1()
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, amenities_general_node, Label.amenities_general])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, amenities_general_node, {c,v}])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, amenities_general_node, :has_amenities_genneral])
                                                                GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, amenities_general_node, :has_amenities_general])
                                   {c,{:%{}, [],[{c1, [{:%{},[],[{c2,v},{c3,l}]}|tail]},{c4, [{:%{},[],[{c5,v1},{c6,l1}]}|tail1]}]}} ->
                                                                cond do
                                                                  [c,c1,c2] in @images_rooms_link && [c,c1,c3] in @images_rooms_caption && [c,c4,c5] in @images_amenities_link && [c,c4,c6] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c1,c2] in @images_rooms_link && [c,c1,c3] in @images_rooms_caption && [c,c4,c6] in @images_amenities_link && [c,c4,c5] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c1,c3] in @images_rooms_link && [c,c1,c2] in @images_rooms_caption && [c,c4,c6] in @images_amenities_link && [c,c4,c5] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c1,c3] in @images_rooms_link && [c,c1,c2] in @images_rooms_caption && [c,c4,c5] in @images_amenities_link && [c,c4,c6] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c4,c5] in @images_rooms_link && [c,c4,c6] in @images_rooms_caption && [c,c1,c2] in @images_amenities_link && [c,c1,c3] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c4,c5] in @images_rooms_link && [c,c4,c6] in @images_rooms_caption && [c,c1,c3] in @images_amenities_link && [c,c1,c2] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end
                                                                  [c,c4,c6] in @images_rooms_link && [c,c4,c5] in @images_rooms_caption && [c,c1,c3] in @images_amenities_link && [c,c1,c2] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end

                                                                  [c,c4,c6] in @images_rooms_link && [c,c4,c5] in @images_rooms_caption && [c,c1,c2] in @images_amenities_link && [c,c1,c3] in @images_amenities_caption ->
                                                                    images_rooms_caption = UUID.uuid1()
                                                                    images_rooms_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c5,v1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c6,l1}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    for {:%{},[],[{c5,v1},{c6,l1}]} <- tail1 do
                                                                      images_rooms_caption = UUID.uuid1()
                                                                      images_rooms_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_caption, Label.images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_caption, {c,c4,c5,v1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_rooms_link, Label.images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_rooms_link, {c,c4,c6,l1}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_rooms_caption, :has_images_rooms_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_rooms_link, images_rooms_caption, :link_has_caption])
                                                                    end
                                                                    images_amenities_caption = UUID.uuid1()
                                                                    images_amenities_link = UUID.uuid1()
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c3,l}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_rooms_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c2,v}])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                    GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    for {:%{},[],[{c2,v},{c3,l}]} <- tail do
                                                                      images_amenities_caption = UUID.uuid1()
                                                                      images_amenities_link = UUID.uuid1()
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_caption, Label.images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_caption, {c,c1,c3,l}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_caption])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex, images_amenities_link, Label.images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_vertex_properties, images_amenities_link, {c,c1,c2,v}])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, id, images_amenities_caption, :has_images_amenities_link])
                                                                      GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, destination_id, images_amenities_caption, :has_images_amenities_link])
                                                                     GenServer.call(Loyalty.DataAcquisitionGraph, [:add_edge, images_amenities_link, images_amenities_caption, :amenities_link_has_caption])
                                                                    end
                                                end                   
                                    {c,v} -> {c,v}                                     
                                  end
                                end 
      end
    end
    v = GenServer.call(Loyalty.DataAcquisitionGraph, [:vertices])
    l = Enum.map(v, fn x -> GenServer.call(Loyalty.DataAcquisitionGraph, [:look_up, x]) end)
    i = Macro.to_string(Macro.escape(l))
    {:ok, i}    
  end

end
 
